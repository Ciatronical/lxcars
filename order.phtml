<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8' />




<?php
    require_once( __DIR__."/../inc/stdLib.php" );
    //$menu = $_SESSION['menu'];
    echo $menu['stylesheets'];
    echo $menu['javascripts'];
    echo $head['THEME'];
    echo $head['FANCYBOX'];
?>


  
  <script type="text/javascript" src="kivi.Order.js"></script>
  <!--<script type="text/javascript" src="kivi.Part.js"></script> -->

  <script type="text/javascript" src="jQueryAddOns/date-time-picker.js"></script>
  <script type="text/javascript" src="jQueryAddOns/german-date-time-picker.js"></script>

<script>

$(document).ready(function() {


    $.urlParam = function( name ){
        var results = new RegExp( '[\?&]' + name + '=([^&#]*)' ).exec( window.location.href );
        if( results == null );// alert( 'Parameter: "' + name + '" does not exist in "' + window.location.href + '"!' );
        else return decodeURIComponent( results[1] || 0 );
    }


    //console.log($.urlParam( 'id' ) + '; ' + $.urlParam( 'owner' ) + '; ' + $.urlParam( 'c_id' ));

    //var id = $.urlParam( 'id' );
    var timer;
    var articleDescription;
    var grp_name;
    var grpSel;
    var grpMbr = new Array;
    var getMembers = new Array;

    var kivi_global = jQuery.parseJSON( kivi.myconfig.global_conf );
    var baseUrl = kivi_global.baseurl;
    var numberFormat = kivi.myconfig.numberformat;
    var dateFormat = kivi.myconfig.dateformat;

	

    var task = 3;//$.urlParam( 'task' );
    var OrderID = $.urlParam( 'id' );
    var ow = $.urlParam( 'owner' );
    var car = $.urlParam( 'c_id' );
    var previous = $.urlParam( 'previous' );
    var newOrder = $.urlParam( 'newOrder' )
//newPositionContainer();
    //alert( kivi.myconfig.dateformat == 'dd.mm.yy'  );

    //console.log( baseUrl );
    //console.log(kivi_global);
    //console.log(kivi_global.erp_all_groups);
    //console.log(numberFormat);
    //console.log(dateFormat);

        grp_name = 'Werkstatt';
        $.ajax({
            url: 'ajax/order.php?action=getUsersFromGroup&data=' + grp_name,
            type: 'GET',
            success: function (data) {
                //console.log(JSON.stringify(data));
                //console.log(data);
                //console.log(data.length);

                $.each( data, function( index, item ){
                    //console.log(item);
                    getMembers.push(
                        item.name
                    )
                    //alert(getMembers);
                })

            },
            error:  function(){ alert("holen der Gruppenzugeh√∂rigkeit fehlgeschlagen!"); }
        })
getUnits();
   function getUnits(){
        $.ajax({
            url: 'ajax/order.php?action=getUnits',
            type: 'GET',
            success: function (data) {
				
                $.each(data, function (index, item) {
                  
                    $('.unity').append($('<option class="opt unit__'+item.name+'" value="'+item.name+'">'+item.name+'</option>'));
                    //$('#selectArtAnlUnits').append($('<option id="unit__'+item.name+'" value="'+item.name+'">'+item.name+'</option>'));
                })

            },
            error:  function(){ alert("Holen der Einheiten fehlgeschlagen!"); }
        })
}

getMechanics();
function getMechanics(){

$.ajax({
            url: 'ajax/order.php?action=getMechanics',
            type: 'GET',
            success: function (data) {
				
                $.each(data, function (index, item) {
                   //console.log(item);
                    $('.mechanics').append($('<option class="opt mech__'+item.name+'" value="'+item.name+'">'+item.name+'</option>'));
               
                })

            },
            error:  function(){ alert("Holen der Mechaniker fehlgeschlagen!"); }
        })


}




        //var orderID;

        //Head-Area
        var id = $.urlParam( 'id' );
        $.ajax({
            url: 'ajax/order.php?action=getOrder&data=' + id,
            type: 'GET',
            success: function (data) {
                //console.log(JSON.stringify(data));
                //console.log(data);
                car = data.c_id;
                //alert(car);

                if (data.km_stnd == null) {
                    //alert('km_stnd is empty');
                    data.km_stnd = '0';
                }
                if (data.car_status == null) {
                    //alert('car_status is empty');
                    data.car_status = 'Auto hier';
                }

                $('#head02').text(data.ordnumber);
                $('#head04').text(data.customer_name);
                $('#head10').text(kivi.myconfig.name);
                $('#head16').text(data.transdate);
                $('#head06').val(data.finish_time);
                $('#head08').val(data.km_stnd);
                $('#head20').val(data.c_ln);
                $('#head18').val(data.order_status);
                $('#head14').val(data.car_status);
                ow = data.customer_id;

                orderID = data.oe_id;
                //console.log(orderID);

                //clearTimeout( timer );
                //timer = setTimeout( function(){
                    //Data-Area




                    $.ajax({
                        url: 'ajax/order.php?action=getPositions&data=' + orderID,
                        type: 'GET',
                        success: function (data) {
                            //alert(JSON.stringify(data));
                            console.log(JSON.stringify(data));
                            console.log(data);

                            $.each(data, function (index, item) {
                                //console.log(item);
                                $('<li class="orderPos positions new ' + ( item.instruction ? 'instruction' : '' ) + '">' +
                                    '<img src="' + baseUrl + '/image/updown.png" class="mv">' +
                                    '<img src="' + baseUrl + '/image/close.png" class="rmv">' +
                                    '<input value="'+item.item_kind+'" name="kind" type="text" class="ui-widget-content ui-corner-all pos elem">' +
                                    '<input value="'+item.item_position+'" name="order_nr" type="text" class="ui-widget-content ui-corner-all pos elem">' +
                                    '<input value="'+item.partnumber+'" name="itemNr" type="text" id="input_01" class="ui-widget-content ui-corner-all itemNr elem">' +
                                    '<input value="'+item.description+'" name="pos_description" type="text" class="ui-widget-content ui-corner-all description oPdescription description2 elem">' +
                                    '<input value="'+item.unit+'" name="pos_unit" type="text" class="ui-widget-content ui-corner-all unity oPunity unity2 elem" autocomplete="off">' +
                                    '<input value="' + item.qty.toFixed(2).replace('.', ',') + '" type="text"  class="ui-widget-content ui-corner-all number number2 elem numeric" >' +
                                    '<input value="'+item.sellprice.toFixed(2).replace('.', ',')+'" type="text" id="input_04" class="ui-widget-content ui-corner-all price price2 elem numeric">' +
                                    '<input value="'+item.discount+'" type="text" id="input_05" class="ui-widget-content ui-corner-all discount discount2 elem numeric">' +
                                    '<input value="'+item.marge_total.toFixed(2).replace('.', ',')+'" name="pos_total" value="0" type="text" class="ui-widget-content ui-corner-all total total2 elem" autocomplete="off">' +
                                    '<select name="pos_emp" type="text" class="ui-widget-content ui-corner-all mechanics mechanics2 elem" autocomplete="off">' +
                                        '<option class="opt mech__0" value="0"></option>' +
                                    '</select>' +
                                    '<select name="pos_status" type="text" class="ui-widget-content ui-corner-all status status2 elem" autocomplete="off">' +
                                        '<option value="gelesen">gelesen</option>' +
                                        '<option value="Bearbeitung">Bearbeitung</option>' +
                                        '<option value="erledigt">erledigt</option>' +
                                    '</select>' +
                                    '<label value="'+item.position_id+'" name="pos_id" class="posID posID2 elem">'+item.position_id+'</label>' +
                                    '<label value="'+item.parts_id+'" name="partID" class="partID partID2 elem">'+item.parts_id+'</label>' +
                                    //'<label value="'+item.item_kind+'" name="kind" class="ui-widget-content ui-corner-all pos-instruction pos-instruction2 elem">'+item.item_kind+'0</label>' +
                                    '<label value="'+item.item_kind+'" name="kind" class="pos-instruction pos-instruction2 elem"></label>' +
                                '</li>').insertBefore('.newOrderPos');
                                //alert(item.status);

                                $('.new').children('.status2').val(item.status);
                                $('.new').children('.mechanics2').val(item.u_id);
                                $('.new').removeClass('new');
                                //$( '.posID' ).hide();
                                $( '.partID' ).hide();
                                $( '.instruction' ).css({ 'background-color': 'blue'  });
                                if( $.inArray( item.u_id, getMembers ) != -1 ){
                                        //console.log( 'item: ' + item.u_id + ' ist vorhanden!' )
                                } else {
                                        //console.log( 'item: ' + item.u_id + ' nicht vorhanden!' )
                                    getMembers.push(
                                        item.u_id
                                    )
                                }

                                grpMbr.push( {
                                    "position": item.item_position,
                                    "mechanics": item.u_id
                                } )


                            })
                                newOrderTotalPrice()

                                $.each( getMembers, function ( index, item ) {
                                    if (item != '') {//ToDo:
                                      //alert('item: ' + item + ' != NULL');
                                        $('.mechanics').append($('<option class="opt mech__'+item+'" value="'+item+'">'+item+'</option>'));
                                    }
                                } )

                                $.each(grpMbr,function (index, item) {
                                    $('.orderPos').each(function () {
                                        if ($(this).children('.pos').val() == item.position) {
                                           //console.log('Auf Position ' + $(this).children('.pos').val() + ' befindet sich ' + item.mechanics);
                                           $(this).children('.mechanics').val(item.mechanics);
                                        }
                                    })
                                })

                                zaehler();
                                //getMembersOfGroup();


                                function newOrderTotalPrice() {
                                    var nOTP = parseFloat(0);
                                    var nOTPBr = parseFloat(0);
                                    $( 'ul#sortable > li' ).each( function(){
                                        nOTP = (nOTP + parseFloat( ($(this).children('.total').val()).replace(',', '.')) );
                                    })
                                        //console.log(nOTP);
                                        $('#orderTotalNetto').val((nOTP).toFixed(2).replace('.', ','));
                                        nOTPBr = ( nOTP * 1.19 );
                                        $('#orderTotalBrutto').val((nOTPBr).toFixed(2).replace('.', ','));
                                        //console.log(nOTPBr);
                                }

                                $( '.rmv' ).click( function (){
                                    //var posToDel = {};
                                    //var posToDel = $(this).parent().children('.posID').text();
                                    //console.log(posToDel);

                                    //alert( $( this ).parent().hasClass( 'instruction' ) );

                                    //alert( $( this ).parent().hasClass( 'instruction' ) );

                                        $.ajax({
                                            url: 'ajax/order.php',
                                            data: { action: "delPosition",  data: { 'posToDel': $(this).parent().children( '.posID' ).text(), 'instruction':  $( this ).parent().hasClass( 'instruction' ) } },
                                            type: "POST",
                                            dataType: 'text',//important, when before set as JSON
                                            success: function(){
                                                //alert('Gesendet');
                                            },
                                            error:   function(){
                                                alert('l√∂schen der Daten fehlgeschlagen!');
                                            }
                                        });

                                    $( this ).parent().remove();
                                    zaehler();
                                    updatePositionDatabase();
                                    newOrderTotalPrice();
                                    updateOrderDatabase();
                                });

                                $('.mechanics, .status').change(function (e) {
                                    updatePositionDatabase();
                                })

                                $( '.elema' ).on( 'keyup', function () {
                                    var y = $( this ).val();
                                    $( this ).attr( 'value', y );
                                    //console.log(y);
                                    updatePositionDatabase();
                                } )

                                $( '.number, .price, .discount' ).on( 'keyup', function () {
                                    if ($(this).parent('.positions').hasClass('orderPos')) {
                                        var number = $( this ).parent( '.orderPos' ).children( '.number' ).val().replace(',', '.');
                                        var price = $( this ).parent( '.orderPos' ).children( '.price' ).val().replace(',', '.');
                                        var discount = ( 1 - ($( this ).parent( '.orderPos' ).children( '.discount' ).val() / 100) );
                                        //console.log('NUMBERCHANGE = ' + price + ', ' + number + ', ' + discount);
                                        //var z = ( x * y );
                                        $( this ).parent( '.orderPos' ).children( '.total' ).val( ((number * price) * discount).toFixed(2).replace('.', ',') );
                                        //console.log( (number * price) * discount );
                                        newOrderTotalPrice();
                                        updateOrderDatabase();
                                        updatePositionDatabase();
                                    }
                                } )

                                $('.numeric').on('input', function (event) {
                                    this.value = this.value.replace(/[^0-9.,]/g, '');
                                });

                        }
                    })

            },
            error:  function(){
                alert( "Holen des Auftrages fehlgeschlagen!" );

            }
        })

var posID=1;
$('<div class="ui-widget-content">' +
            '<div id="tmp"></div>' +
            '<div>' +
                '<p class="tools ui-state-highlight ui-corner-all lang " style="margin-top: 20px; padding: 0.6em;" data-lang="HEADLINE">' +
                    '<label id="head01">Auftragsnummer:</label>' +
                    '<label id="head02">0000</label>' +
                    '<label id="head03">Auftraggeber:</label>' +
                    '<label id="head04"></label></br>' +
                    '<label id="head05">Fertigstellung:</label>' +
                    '<input id="head06" type="text">' +
                    '<label id="head07">KM-Stand:</label>' +
                    '<input id="head08" type="text"></br>' +
                    '<label id="head09">bearbeitet von:</label>' +
                    '<label id="head19">Amtl.-Kennz.:</label>' +
                    '<input id="head20" type="text"></br>' +
                    '<label id="head10"></label>' +
                    '<label id="head11">bearbeitet am:</label>' +
                    '<label id="head12"></label></br>' +
                    '<label id="head13">KfZ:</label>' +
                    '<select id="head14" type="text">' +
                        '<option>Auto nicht hier</option>' +
                        '<option selected="selected">Auto hier</option>' +
                        '<option>Sonstiges zur Reparatur gebracht</option>' +
                        '<option>Bestellung</option>' +
                    '</select></br>' +
                    '<label id="head15">erstellt am:</label>' +
                    '<label id="head16"></label>' +
                    '<label id="head17">Status:</label>' +
                    '<select id="head18" type="text">' +
                        '<option></option>' +
                        '<option>angenommen</option>' +
                        '<option>bearbeitet</option>' +
                        '<option selected="selected">abgerechnet</option>' +
                    '</select>' +
                '</p>' +
               '<div>' +
                '<button id="backToCRM"></button>' +
                '<button id="backToOrderList"></button>' +
                '<button id="backToCar"></button>' +
                '<button id="printOrder"></button>' +
                '<button id="pdfOrder"></button>' +
                '<button id="testBtn"></button>' +
                '<div>' +
                '<img src="' + baseUrl + '/image/updown.png" class="lblPositioning lblPos1">' +
                '<img src="' + baseUrl + '/image/close.png" class="lblPositioning lblPos2">' +
                '<label name="position" class="lblPositioning lblPos3">Position</label>' +
                '<label name="art_nr" class="lblPositioning lblPos4">Artikel-Nr.</label>' +
                '<label name="bezeichnung" class="lblPositioning lblPos5">Beschreibung</label>' +
                '<label name="einheit" class="lblPositioning lblPos6">Einheit</label>' +
                '<label name="anzahl" class="lblPositioning lblPos12">Anzahl</label>' +
                '<label name="preis" class="lblPositioning lblPos7">Preis</label>' +
                '<label name="rabatt" class="lblPositioning lblPos8">Rabatt</label>' +
                '<label name="gesamt" class="lblPositioning lblPos9">Gesamt</label>' +
                '<label name="mechaniker" class="lblPositioning lblPos10">Mechaniker</label>' +
                '<label name="status" class="lblPositioning lblPos11">Status</label>' +
            '</div>' +
            
            '<div id="test">' +
            
            '<form id="myform">' +
                    '<ul id="sortable">' +
            
             '</ul>' +
                        '<li>' +
                            '<label id="netto">Netto:</label>' +
                            '<input name="pos_orderTotalNetto" value="0" type="text" id="orderTotalNetto" class="ui-widget-content ui-corner-all" autocomplete="off">' +
                        '</li></br>' +
                        '<li>' +
                            '<label id="brutto">Brutto:</label>' +
                            '<input name="pos_orderTotalBrutto" value="0" type="text" id="orderTotalBrutto" class="ui-widget-content ui-corner-all" autocomplete="off">' +
                        '</li>' +
                     
                        
                '</form>' +
            
            '</div>'+
            
            
            '</div>').appendTo('body');
            
newPositionContainer()


        
      

function newPositionContainer() {
        $(  
                
                        '<li class="newOrderPos positions">' +
                            '<img src="' + baseUrl + '/image/updown.png" class="mv">' +
                            '<img src="' + baseUrl + '/image/close.png" id="remove" class="rmv">' +
                            '<input name="order_nr" type="text" class="ui-widget-content ui-corner-all pos elem" value="'+posID+'">' +
                            '<input name="itemNr" type="text" id="input_01_'+posID+'" class="ui-widget-content ui-corner-all itemNr elem">' +
                            '<span class="part_picker">' +
                                '<input name="pos_description" type="text" id="add_item_parts_id_name_'+posID+'" class="add_item_input part_autocomplete partpicker_fat_set_item ui-widget-content ui-corner-all description descrNewPos elem">' +
                                '<input type="hidden" class="add_item_input part_autocomplete partpicker_fat_set_item" id="add_item_parts_id" name="add_item.parts_id" value="">'+
                                
                            '</span>' +
                            '<select id="input_03_'+posID+'" name="pos_unit" type="text" class="ui-widget-content ui-corner-all unity nPunity elem" autocomplete="off">' +
                                '<option class="opt unit__0" value="0"></option>' +
                            '</select>' +
                            '<input type="text" value="0" class="ui-widget-content ui-corner-all number elem">' +
                            '<input type="text" id="input_04_'+posID+'" class="ui-widget-content ui-corner-all price elem">' +
                            '<input type="text" id="input_05" class="ui-widget-content ui-corner-all discount elem">' +
                            '<input name="pos_total" value="0" type="text" class="ui-widget-content ui-corner-all total elem" autocomplete="off">' +
                            '<select name="pos_emp" type="text" class="ui-widget-content ui-corner-all mechanics elem" autocomplete="off">' +
                                '<option class="opt mech__0" value=""></option>' +
                            '</select>' +
                            '<select name="pos_status" type="text" class="ui-widget-content ui-corner-all status elem" autocomplete="off">' +
                                '<option value="0" selected="true"></option>' +
                                '<option value="gelesen">gelesen</option>' +
                                '<option value="Bearbeitung">Bearbeitung</option>' +
                                '<option value="erledigt">erledigt</option>' +
                            '</select>' +
                            '<label name="pos_id" class="posID elem"></label>' +
                            '<label name="part_id" class="partID elem"></label>' +
                            '<label value="0" name="kind" class="pos-instruction elem"></label>' +
                        '</li>' +
                  
                   
                
              
                
                
        '</div>').appendTo('#sortable');
}

		


zaehler();
	

$("#remove").click(function (e) {
	console.log("click");
		e.parent().removeChild();
	
})

		
$("*").keyup(function(e) {
	
		if(e.which==13){
 		autocompletePart();
 		//console.log(posID);	
 		
 		
 		
		}
		
			console.log($(':focus').parent().children('.price').val());
	var price=$(':focus').parent().children('.price').val();
	var number=$(':focus').parent().children('.number').val();
	var discount=$(':focus').parent().children('.discount').val();
	if(discount=="" || discount==0)
	$(':focus').parent().children('.total').val(price*number);
	else{
	discount=discount/100;
	$(':focus').parent().children('.total').val(price*number-(price*number*discount));	
	}
		
		
});


$("*").click(function() {
	
		
 		autocompletePart();
 		//console.log(posID);	
		
});


$(".number").keyup(function () {
	

	
	
});






function autocompletePart(){




if($("#pos__"+posID+"__elem__3").val()!=""){	
		
		
		console.log(posID);
		
			
			
		
		if($('#pos__'+posID+'__elem__2').val()!=""){
		
			
		}else {
			
			
		
		var val=$("#pos__"+posID+"__elem__3").val();
  		number=val.split(" ");
  		console.log(val);
  		$('#pos__'+posID+'__elem__2').val(number[0]);
  		var part_id=number[0];
  		number.shift();
  		var str=number.join(" ");
  		$(":focus").val(str);
		
		//console.log(part_id);
		 $.ajax({
            url: 'ajax/order.php?action=getPartJSONbyPartnumber&data=' + part_id,
            type: 'GET',
            success: function (data) {
				
				//console.log(data.sellprice)
                $('#pos__'+(posID-1)+'__elem__6').val(parseFloat(data.sellprice).toFixed(2));
                $('#pos__'+(posID-1)+'__elem__4').val(data.unit);
                $('#pos__'+(posID-1)+'__elem__5').val(1);
                

            },
            error:  function(){ console.log("error"); }
        })	
			
			
			
			console.log($(':focus').parent().parent().children('.price').val());
										var number = $(':focus').parent().parent().children('.number').val();
                                        var price = $( ':focus' ).parent().parent().children('.price').val();
                                        
                                        //console.log(price);
                                       // console.log(number);
                                        
                                        var discount = ( 1 - ($(':focus').parent().parent().children( '.discount' ).val() / 100) );
                                        
                                         //console.log(discount);
                                        //console.log('NUMBERCHANGE = ' + price + ', ' + number + ', ' + discount);
                                        //var z = ( x * y );
                                        $(':focus').parent().parent().children( '.total' ).val( ((number * price) * discount).toFixed(2).replace('.', ',') );
                                        //console.log( (number * price) * discount );
                                        newOrderTotalPrice();
			
			
			
			posID++;
			newPositionContainer();
			kivi.Part.init();
			getUnits();
			getMechanics();
			
			
			
			
			
			
		
			
			
			
			
			zaehler();
			
			
				
			
			
			
			$('#sortable').sortable({
            update: function() {
                zaehler();
               
            	}
        	});
        								
        	
        	
                                        
                                       
                                    
        	
			
			$("#pos__"+posID+"__elem__3").focus()
			
			
			
			
			
			
			
			//newOrderTotalPrice()
		}
				  		
  		
  	}


}

 $('.number, .price, .discount').on('keyup', function () {
                                    if ($(this).parent('.positions').hasClass('orderPos')) {
                                    
                                        var number = $( this ).parent( '.orderPos' ).children( '.number' ).val().replace(',', '.');
                                        var price = $( this ).parent( '.orderPos' ).children( '.price' ).val().replace(',', '.');
                                        var discount = ( 1 - ($( this ).parent( '.orderPos' ).children( '.discount' ).val() / 100) );
                                        //console.log('NUMBERCHANGE = ' + price + ', ' + number + ', ' + discount);
                                        //var z = ( x * y );
                                        $( this ).parent( '.orderPos' ).children( '.total' ).val( ((number * price) * discount).toFixed(2).replace('.', ',') );
                                        //console.log( (number * price) * discount );
                                        newOrderTotalPrice();
                                        updateOrderDatabase();
                                        updatePositionDatabase();
                                    }
                                } )



 function newOrderTotalPrice() {
 	
                                    var nOTP = parseFloat(0);
                                    var nOTPBr = parseFloat(0);
                                    $( 'ul#sortable > li' ).each( function(){
                                        nOTP = (nOTP + parseFloat( ($(this).children('.total').val()).replace(',', '.')) );
                                    })
                                        //console.log(nOTP);
                                        $('#orderTotalNetto').val((nOTP).toFixed(2).replace('.', ','));
                                        nOTPBr = ( nOTP * 1.19 );
                                        $('#orderTotalBrutto').val((nOTPBr).toFixed(2).replace('.', ','));
                                        //console.log(nOTPBr);
 }



       // $('#add_item_parts_id_name').focus();
        //$( '.posID' ).hide();
        //$( '.partID' ).hide();

        $( "#backToCRM" ).button({
            label: "CRM"
        }).css({
            'margin':'5px'
        }).click( function(){
            updateOrderDatabase();
            location.href = baseUrl + '/crm/firma1.php?Q=C&id=' + ow;
            return false;
        });

        $( "#backToOrderList" ).button({
            label: "Back to Orderlist"
        }).css({
            'margin':'5px'
        }).click( function(){
            updateOrderDatabase();
            window.location = baseUrl + '/crm/lxcars/' + previous + '?task=' + task + '&owner=' + ow + '&c_id=' + car;
            return false;
        });

        $( "#backToCar" ).button({
            label: "Back to Car"
        }).css({
            'margin':'5px'
        }).click( function(){
            updateOrderDatabase();
            window.location = baseUrl + '/crm/lxcars/lxcmain.php?owner=' + ow + '&c_id=' + car + '&task=3';
            return false;
        });

        $( "#printOrder" ).button({
            label: "Print"
        }).css({
            'margin':'5px'
        }).click( function(){
            createPDF( 1 );
        });

        $( "#pdfOrder" ).button({
            label: "PDF"
        }).css({
            'margin':'5px'
        }).click( function(){
            createPDF( 0 );
            //wait for generate pdf on server
            setTimeout( function(){
                $.fancybox({
                    width: 600,
                    height: 850,
                    autoSize: false,
                    href: 'out.pdf',
                    type: 'iframe',
                    fitToView: true,
                });
            }, 100);
        })//alternative https://mozilla.github.io/pdf.js/examples/

        $( "#testBtn" ).button({ //don't delete this test-button!...
            label: "Test"
        }).css({
            'margin':'5px'
        }).click( function(){
            //alert( 'test' );
            //$( '.newOrderPos' ).children( 'img' ).css({ 'visibility' : 'hidden' });
            return false;
        }).hide();

function sortablePos(){
        $('#sortable').sortable({
            update: function() {
                zaehler();
                updatePositionDatabase();
            },
            items: "li:not( .newOrderPos )"//dont move last line
        });
}
        //hide last li images, dont remove last li
        $( '.newOrderPos' ).children( 'img' ).css({ 'visibility' : 'hidden' })

        $( '#head08, #head20, #head06' ).on( 'keyup', function(){
            updateOrderDatabase();
        });

        $( '#head06, #head18, #head14' ).change( function(){
            updateOrderDatabase();
        });

        $( '.description' ).on( 'keyup', function(){
            //Wird ben√∂tigt um der ".elem" f√ºr das INSERT das Value zu zuweisen
            var y = $(this).val();
            $(this).attr('value', y);
            if( y.length >= 1 && $(this).hasClass( 'descrNewPos' ) ){
                //insertIntoDatabase();
                $(this).removeClass('descrNewPos');
                //alert('will insert')
            } else {
                    //updatePositionDatabase();//ToDo!!!!
            }
        });

    function zaehler() {
        $( '.positions' ).each( function( cnt, list ){
            $( list ).attr( 'id', 'pos__' + ( cnt + 1 ) ).children( '.pos' ).val( ( cnt + 1 ) ).attr('value', (cnt + 1));
            //For-Schleife um in den einzelnen ListenElementen die Felder
            //durch zu z√§hlen und zu nummerieren
            var elements = $( this ).find( '.elem' )
            for( var i = 0; i < elements.length; i++ ){
                elements[i].id = $( list ).attr( 'id' ) + '__elem__' + ( i + 1 );
                //alert(elements[i].id + ' wird neu sortiert');
            }
           
            
            
            
        })
        //updatePositionDatabase();
    }

    function insertIntoDatabase() {
        alert('delete_me' );
        var posObject = {};
        var posArray = $( '.newOrderPos' ).children( '.elem' );
        $.each( posArray, function( index, item ){
            posObject[item.name] = item.value;
        });
        posObject['order_id'] = orderID;
        posObject['description'] = $( '.newOrderPos' ).children().children( '.elem' ).val();
        // Insert
        $.ajax({
            url: 'ajax/order.php',
            //data: { action: "newEntry", data: JSON.stringify(sendData) },
            data: { action: "newEntry", data: posObject },
            type: "POST",
            success: function(result){
                $('.newOrderPos').children('.posID').text( result );
                    //$('#pos__' + ( i +  1 ) + '__elem__9').text(result);
            },
            error:   function(){
                alert('Insert der Daten fehlgeschlagen!');
            }
        });
    }

    function updatePositionDatabase() { //ToDo unbedingt mit updatePositions zusammenlegen
        clearTimeout( timer );
        timer = setTimeout( function(){   //calls click event after a certain time
            var updateDataJSON = new Array;
            $( 'ul#sortable > li' ).each( function(){
                //var mechOptSel = $('option:selected', this).attr('u-id');
                updateDataJSON.push({
                    //"Bezeichnung des Arrays": Inhalt der zu Speichern ist
                    "order_nr": $( this ).children( '.pos' ).val(),
                    "item_nr": $( this ).children( '.itemNr' ).val(),
                    "pos_description": $( this ).children( '.description' ).val(),
                    "pos_unit": $( this ).children( '.unity' ).val(),
                    "pos_qty": $( this ).children( '.number' ).val().replace(',', '.'),
                    "pos_price": $( this ).children( '.price' ).val().replace(',', '.'),
                    "pos_discount": $( this ).children( '.discount' ).val(),
                    "pos_total": $( this ).children( '.total' ).val().replace(',', '.'),
                    "pos_emp": $( this ).children( '.mechanics' ).val(),
                    "pos_status": $( this ).children( '.status' ).val(),
                    "pos_id": $( this ).children( '.posID' ).text(),
                    "partID": $( this ).children( '.partID' ).text(),
                    "pos_instruction": $( this ).hasClass( 'instruction' )
                });
            })

            updateDataJSON.pop();

            $.ajax({
                url: 'ajax/order.php',
                //data: { action: "updatePositions", data: JSON.stringify(updateDataJSON)},
                data: { action: "updatePositions", data: updateDataJSON },
                type: "POST",
                    success: function(){
                        //alert( 'send all posdata' );
                        updateOrderDatabase();
                    },
                    error:  function(){
                        alert( 'Update fehlgeschlagen' );
                    }
            });
        }, 800 );
    }

    function updateOrderDatabase() {
        var netamount = $('#orderTotalNetto').val().replace(',', '.');
        var amount = $('#orderTotalBrutto').val().replace(',', '.');
        clearTimeout( timer );
        timer = setTimeout( function(){   //calls click event after a certain time
            var updateDataJSON = new Array;
            if ($('#head06').val() == '') {
                $('#head06').val( $('#head16').text() );
            };
            updateDataJSON.push({
                //"Bezeichnung des Arrays": Inhalt der zu Speichern ist
                "id": id,
                //"ordnumber": orderID,
                "km_stnd": $('#head08').val() ? $('#head08').val() : 0,
                "netamount": netamount,
                "amount": amount,
                "status": $('#head18').val(),
                "finish_time": $('#head06').val(),
                "car_status": $('#head14').val()
            });
            //console.log(updateDataJSON);

            //updateDataJSON.pop();

            $.ajax({
                url: 'ajax/order.php',

                data: { action: "updateOrder", data: updateDataJSON },
                type: "POST",
                    success: function(){
                        //alert( 'send all posdata' );
                    },
                    error:  function(){
                        alert( 'Update des Auftrages fehlgeschlagen' );
                    }
            });

        }, 800 );
    }

    function createPDF( printDoc ) {
        var netamount = $('#orderTotalNetto').val().replace('.', ',');//ToDo: Vorhandene Kivi-Funktion nutzen!!!!
        var amount = $('#orderTotalBrutto').val().replace('.', ',');//ToDo
        var printDataJSON = new Array;
        //Creates $data[0]['ordernumber'],....
        printDataJSON.push({
            "plate": $('#head20').val(),
            "c_id": car,
            "printDoc": printDoc,
            "ordernumber": orderID,
            "milage": $('#head08').val(),
            "netamount": netamount,
            "amount": amount,
            "status": $('#head18').val(),
            "finish_time": $('#head06').val(),
            "car_status": $('#head14').val(),
            "datum": $('#head16').text()
        });
        //Creates $data[1..n]['item_nr'],...
        var positions = $( 'ul#sortable > li' );
        positions.splice( -1, 1 ); //Remove last element (it's always empty)
        positions.each( function(){
            printDataJSON.push({
                //"position": $( this ).children( '.pos' ).val(),
                "item_nr": $( this ).children( '.itemNr' ).val(),
                "pos_description": $( this ).children( '.description' ).val(),
                "pos_unit": $( this ).children( '.unity' ).val(),
                "pos_qty": $( this ).children( '.number' ).val(),
                "pos_price": $( this ).children( '.price' ).val().replace(',', '.'),
                "pos_discount": $( this ).children( '.discount' ).val(),
                "pos_total": $( this ).children( '.total' ).val().replace(',', '.'),
                "pos_emp": $( this ).children( '.mechanics' ).val(),
                "pos_status": $( this ).children( '.status' ).val(),
                "pos_id": $( this ).children( '.posID' ).text(),
                "partID": $( this ).children( '.partID' ).text(),
                "pos_instruction":  $( this ).hasClass( 'instruction' )
            });
        })

        $.ajax({
            url: 'ajax/order.php',
            data: { action: "printOrder", data: printDataJSON },
            type: "POST",
            //success: function( result ){
            //alert( result );
            //},
            error: function(){
                alert( 'Error: Print Order!' );
            }
        });
    }

    //DateTimePicker
    function AddButton( input ){
        setTimeout( function(){
            var buttonPane = $( input ).datepicker( "widget" ).find( ".ui-datepicker-buttonpane" );
            var btn = $('<button class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" type="button"> Wartet</button>');
            btn.appendTo( buttonPane );
            btn.bind( "click", function(){
                $( "#head06" ).val("Kunde wartet! SOFORT anfangen!");
                updateOrderDatabase();
            });
        }, 1 );
    }

    $( "#head06" ).datetimepicker({
        beforeShow: function( input ){
            AddButton(input);
        },
        onChangeMonthYear: function( year, month, inst ){
            AddButton( inst.input );
            updateOrderDatabase();
        },
        stepMinute: 5,
        hour: 1,
        hourMin: 6,
        hourMax: 19,
        timeSuffix: ' Uhr',
        timeText: 'Zeit',
        hourText: 'Stunde',
        closeText: 'Fertig',
        currentText: 'Jetzt'
    });


$('#add_item_parts_id_name').focus();

setTimeout(function() { jQuery("#pos__"+posID+"__elem__3").focus() }, 10);

}); //Ende $(document).ready()

</script>
<style>

table.tablesorter { width:auto; cursor:pointer; }

    .input_02{width: 248px;}

    #head01 {position: absolute; top: 135px; left: 5px; font-size: 12px;}
    #head02 {position: absolute; top: 135px; left: 125px; font-size: 12px;}
    #head03 {position: absolute; top: 135px; left: 500px; font-size: 12px;}
    #head04 {position: absolute; top: 135px; left: 650px; font-size: 12px;}
    #head05 {position: absolute; top: 150px; left: 5px; font-size: 12px;}
    #head06 {position: absolute; top: 150px; left: 125px; font-size: 12px;}
    #head07 {position: absolute; top: 150px; left: 500px; font-size: 12px;}
    #head08 {position: absolute; top: 150px; left: 650px; font-size: 12px;}
    #head09 {position: absolute; top: 165px; left: 5px; font-size: 12px;}
    #head10 {position: absolute; top: 165px; left: 125px; font-size: 12px;}
    #head11 {position: absolute; top: 165px; left: 500px; font-size: 12px;}
    #head12 {position: absolute; top: 165px; left: 650px; font-size: 12px;}
    #head13 {position: absolute; top: 180px; left: 500px; font-size: 12px;}
    #head14 {position: absolute; top: 180px; left: 650px; font-size: 12px;}
    #head15 {position: absolute; top: 200px; left: 5px; font-size: 12px;}
    #head16 {position: absolute; top: 200px; left: 125px; font-size: 12px;}
    #head17 {position: absolute; top: 200px; left: 500px; font-size: 12px;}
    #head18 {position: absolute; top: 200px; left: 650px; font-size: 12px;}
    #head19 {position: absolute; top: 150px; left: 850px; font-size: 12px;}
    #head20 {position: absolute; top: 150px; left: 950px; font-size: 12px; width: 100px; background: none; border-style: none; pointer-events: none;}
    #netto { position: absolute; left: 1030px; text-align: right; }
    #orderTotalNetto { position: absolute; left: 1133px; width: 100px; text-align: right; }
    #brutto { position: absolute; left: 1030px; text-align: right; }
    #orderTotalBrutto { position: absolute; left: 1133px; width: 100px; text-align: right; }

    #sortable, #head { list-style-type: none; margin: 0; padding: 0;padding-left: 2.5em; width: 1550px; }
    #sortable li, #head li { margin: 0 3px 3px 3px; font-size: 1.4em; height: 30px; }
    #sortable li span { position: absolute; margin-left: -1.3em; }
    #buttons { padding-left: 2.5em; padding-top: 1em;    }
    .btn { position: relative; left: 15px; }
    .lblPos1 {  position:relative; left: 43px;}
    .lblPos2 {  position:relative; left: 48px;}
    .lblPos3 {  position:relative; left: 53px;}
    .lblPos4 {  position:relative; left: 60px;}
    .lblPos5 {  position:relative; left: 65px;}
    .lblPos6 {  position:relative; left: 555px;}
    .lblPos12 {  position:relative; left: 570px;}
    .lblPos7 {  position:relative; left: 585px;}
    .lblPos8 {  position:relative; left: 660px;}
    .lblPos9 {  position:relative; left: 725px;}
    .lblPos10 {  position:relative; left: 785px;}
    .lblPos11 { position: relative; left: 855px;}
    .mv {  position:relative; left: 5px; top: 3px;}
    .rmv {  position:relative; left: 10px; top: 3px;}
    /*.pos {  position:relative; left: 20px; width: 50px; text-align: right; background: none; border-style: none; pointer-events: none;}*/
    .pos {  position:relative; left: 20px; width: 50px; text-align: right; background: none; border-style: none; pointer-events: none;}
    .itemNr {  position:relative; left: 23px; width: 65px; text-align: right;}
    /*.description {  position:relative; left: 48px; width: 570px;}*/
    .description {  position:relative; left: 48px; width: 577px;}
    .description2 {  position:relative; left: 25px; width: 577px;}
    .unity {  position:relative; left: 608px; width: 55px}
    .unity2 {  position:relative; left: 28px; width: 50px}
    .number {  position:relative; left: 614px; width: 50px; text-align: right;}
    .number2 {  position:relative; left: 35px; width: 50px; text-align: right;}
    .price {  position:relative; left: 617px; width: 100px; text-align: right;}
    .price2 {  position:relative; left: 37px; width: 100px; text-align: right;}
    .discount {  position:relative; left: 622px; width: 100px;text-align: right;}
    .discount2 {  position:relative; left: 42px; width: 100px;text-align: right;}
    .total {  position:relative; left: 627px; width: 100px; text-align: right;}
    .total2 {  position:relative; left: 47px; width: 100px; text-align: right;}
    .mechanics {  position:relative; left: 632px; width: 140px;}
    .mechanics2 {  position:relative; left: 53px; width: 140px;}
    .status { position: relative; left: 637px; width: 140px;}
    .status2 { position: relative; left: 60px; width: 140px;}
    .posID { position: relative; left: 642px; font-size: 12px; }
    .posID2 { position: relative; left: 67px; font-size: 12px; }
    .partID { position: relative; left: 702px; }
    .partID2 { position: relative; left: 70px; }
    .pos-instruction { position: relative; left: 640px; }
    .pos-instruction2 { position: relative; left: 1500px; top: -24px; }

</style>
</head>

<body>
<?php
    echo $menu['pre_content'];
    echo $menu['start_content'];
?>
<p class="ui-state-highlight ui-corner-all tools" style="margin-top: 20px; padding: 0.6em;">Order</p>


<?php echo $menu['end_content']; ?>



</body>
</html>

<script>

namespace('kivi.Part', function(ns) {
  'use strict';

  ns.open_history_popup = function() {
    var id = $("#part_id").val();
    kivi.popup_dialog({
      url:    'controller.pl?action=Part/history&part.id=' + id,
      dialog: { title: kivi.t8('History') },
    });
  }

  ns.save = function() {
    var data = $('#ic').serializeArray();
    data.push({ name: 'action', value: 'Part/save' });

    $.post("controller.pl", data, kivi.eval_json_result);
  };

  ns.use_as_new = function() {
    var oldid = $("#part_id").val();
    $('#ic').attr('action', 'controller.pl?action=Part/use_as_new&old_id=' + oldid);
    $('#ic').submit();
  };

  ns.delete = function() {
    var data = $('#ic').serializeArray();
    data.push({ name: 'action', value: 'Part/delete' });

    $.post("controller.pl", data, kivi.eval_json_result);
  };

  ns.reformat_number = function(event) {
    $(event.target).val(kivi.format_amount(kivi.parse_amount($(event.target).val()), -2));
  };

  ns.set_tab_active_by_index = function (index) {
    $("#ic_tabs").tabs({active: index})
  };

  ns.set_tab_active_by_name= function (name) {
    var index = $('#ic_tabs a[href=#' + name + ']').parent().index();
    ns.set_tab_active_by_index(index);
  };

  ns.reorder_items = function(order_by) {
    var dir = $('#' + order_by + '_header_id a img').attr("data-sort-dir");
    var part_type = $("#part_part_type").val();

    var data;
    if (part_type === 'assortment') {
      $('#assortment thead a img').remove();
      data = $('#assortment :input').serializeArray();
    } else if ( part_type === 'assembly') {
      $('#assembly thead a img').remove();
      data = $('#assembly :input').serializeArray();
    }

    var src;
    if (dir == "1") {
      dir = "0";
      src = "image/up.png";
    } else {
      dir = "1";
      src = "image/down.png";
    }

    $('#' + order_by + '_header_id a').append('<img border=0 data-sort-dir=' + dir + ' src=' + src + ' alt="' + kivi.t8('sort items') + '">');

    data.push({ name: 'action',    value: 'Part/reorder_items' },
              { name: 'order_by',  value: order_by             },
              { name: 'part_type', value: part_type            },
              { name: 'sort_dir',  value: dir                  });

    $.post("controller.pl", data, kivi.eval_json_result);
  };

  ns.assortment_recalc = function() {
    var data = $('#assortment :input').serializeArray();
    data.push({ name: 'action', value: 'Part/update_item_totals' },
              { name: 'part_type', value: 'assortment'                   });

    $.post("controller.pl", data, kivi.eval_json_result);
  };

  ns.assembly_recalc = function() {
    var data = $('#assembly :input').serializeArray();
    data.push( { name: 'action',    value: 'Part/update_item_totals' },
               { name: 'part_type', value: 'assembly'                        });

    $.post("controller.pl", data, kivi.eval_json_result);
  };

  ns.set_assortment_sellprice = function() {
    $("#part_sellprice_as_number").val($("#items_sellprice_sum").html());
    // ns.set_tab_active_by_name('basic_data');
    // $("#part_sellprice_as_number").focus();
  };

  ns.set_assortment_lsg_sellprice = function() {
    $("#items_lsg_sellprice_sum_basic").closest('td').find('input').val($("#items_lsg_sellprice_sum").html());
  };

  ns.set_assortment_douglas_sellprice = function() {
    $("#items_douglas_sellprice_sum_basic").closest('td').find('input').val($("#items_douglas_sellprice_sum").html());
  };

  ns.set_assortment_lastcost = function() {
    $("#part_lastcost_as_number").val($("#items_lastcost_sum").html());
    // ns.set_tab_active_by_name('basic_data');
    // $("#part_lastcost_as_number").focus();
  };

  ns.set_assembly_sellprice = function() {
    $("#part_sellprice_as_number").val($("#items_sellprice_sum").html());
    // ns.set_tab_active_by_name('basic_data');
    // $("#part_sellprice_as_number").focus();
  };

  ns.renumber_positions = function() {
    var part_type = $("#part_part_type").val();
    var rows;
    if (part_type === 'assortment') {
      rows = $('.assortment_item_row [name="position"]');
    } else if ( part_type === 'assembly') {
      rows = $('.assembly_item_row [name="position"]');
    }
    $(rows).each(function(idx, elt) {
      $(elt).html(idx+1);
      var row = $(elt).closest('tr');
      if ( idx % 2 === 0 ) {
        if ( row.hasClass('listrow1') ) {
          row.removeClass('listrow1');
          row.addClass('listrow0');
        }
      } else {
        if ( row.hasClass('listrow0') ) {
          row.removeClass('listrow0');
          row.addClass('listrow1');
        }
      }
    });
  };

  ns.delete_item_row = function(clicked) {
    var row = $(clicked).closest('tr');
    $(row).remove();
    var part_type = $("#part_part_type").val();
    ns.renumber_positions();
    if (part_type === 'assortment') {
      ns.assortment_recalc();
    } else if ( part_type === 'assembly') {
      ns.assembly_recalc();
    }
  };

  ns.add_assortment_item = function() {
    if ($('#assortment_picker').val() === '') return;

    $('#row_table_id thead a img').remove();

    var data = $('#assortment :input').serializeArray();
    data.push({ name: 'action', value: 'Part/add_assortment_item' },
              { name: 'part.id', value: $('#part_id').val()       },
              { name: 'part.part_type', value: 'assortment'       });
    $('#assortment_picker').data('part_picker').clear();

    $.post("controller.pl", data, kivi.eval_json_result);
  };

  ns.add_assembly_item = function() {
    if ($('#assembly_picker').val() === '') return;

    var data = $('#assembly :input').serializeArray();
    data.push({ name: 'action', value: 'Part/add_assembly_item' },
              { name: 'part.id', value: $("#part_id").val()     },
              { name: 'part.part_type', value: 'assortment'     });
    $('#assembly_picker').data('part_picker').clear();

    $.post("controller.pl", data, kivi.eval_json_result);
  };

  ns.set_multi_assembly_items = function(data) {
    data.push({ name: 'part.id',        value: $('#part_id').val() });
    data.push({ name: 'part.part_type', value: $('#part_part_type').val() });
    $.post("controller.pl?action=Part/add_multi_assembly_items", data, kivi.eval_json_result);
  }

  ns.set_multi_assortment_items = function(data) {
    data.push({ name: 'part.id', value: $('#part_id').val() });
    data.push({ name: 'part.part_type', value: $('#part_part_type').val() });
    $.post("controller.pl?action=Part/add_multi_assortment_items", data, kivi.eval_json_result);
  }

  ns.close_picker_dialogs = function() {
    $('.part_autocomplete').each(function(_, e) {
      var picker = $(e).data('part_picker');
      if (picker) picker.close_dialog();
    });
  }

  ns.redisplay_items = function(data) {
    var old_rows;
    var part_type = $("#part_part_type").val();
    if (part_type === 'assortment') {
      old_rows = $('.assortment_item_row').detach();
    } else if ( part_type === 'assembly') {
      old_rows = $('.assembly_item_row').detach();
    }
    var new_rows = [];
    $(data).each(function(idx, elt) {
      new_rows.push(old_rows[elt.old_pos - 1]);
    });
    if (part_type === 'assortment') {
      $(new_rows).appendTo($('#assortment_items'));
    } else if ( part_type === 'assembly') {
      $(new_rows).appendTo($('#assembly_items'));
    }
    ns.renumber_positions();
  };

  ns.focus_last_assortment_input = function () {
   // $("#assortment_items tr:last").find('input[type=text]').filter(':visible:first').focus();
  };

  ns.focus_last_assembly_input = function () {
   // $("#assembly_rows tr:last").find('input[type=text]').filter(':visible:first').focus();
  };

  // makemodel
  ns.makemodel_renumber_positions = function() {
    $('.makemodel_row [name="position"]').each(function(idx, elt) {
      $(elt).html(idx+1);
    });
  };

  ns.delete_makemodel_row = function(clicked) {
    var row = $(clicked).closest('tr');
    $(row).remove();

    ns.makemodel_renumber_positions();
  };

  ns.add_makemodel_row = function() {
    if ($('#add_makemodel').val() === '') return;

    var data = $('#makemodel_table :input').serializeArray();
    data.push({ name: 'action', value: 'Part/add_makemodel_row' });

    $.post("controller.pl", data, kivi.eval_json_result);
  };

  ns.focus_last_makemodel_input = function () {
   // $("#makemodel_rows tr:last").find('input[type=text]').filter(':visible:first').focus();
  };

  ns.reload_bin_selection = function() {
    $.post("controller.pl", { action: 'Part/warehouse_changed', warehouse_id: function(){ return $('#part_warehouse_id').val() } },   kivi.eval_json_result);
  }

  var KEY = {
    TAB:       9,
    ENTER:     13,
    SHIFT:     16,
    CTRL:      17,
    ALT:       18,
    ESCAPE:    27,
    PAGE_UP:   33,
    PAGE_DOWN: 34,
    LEFT:      37,
    UP:        38,
    RIGHT:     39,
    DOWN:      40,
  };

  ns.Picker = function($real, options) {
    var self = this;
    this.o = $.extend(true, {
      limit: 20,
      delay: 50,
      action: {
        commit_none: function(){ },
        commit_one:  function(){ $('#update_button').click(); },
        commit_many: function(){ self.open_dialog(); }
      }
    }, $real.data('part-picker-data'), options);
    this.$real              = $real;
    this.real_id            = $real.attr('id');
    this.last_real          = $real.val();
    this.$dummy             = $($real.siblings()[0]);
    this.autocomplete_open  = false;
    this.state              = this.STATES.PICKED;
    this.last_dummy         = this.$dummy.val();
    this.timer              = undefined;
    this.dialog             = undefined;

    this.init();
  };

  ns.Picker.prototype = {
    CLASSES: {
      PICKED:       'partpicker-picked',
      UNDEFINED:    'partpicker-undefined',
    },
    ajax_data: function(term) {
      var data = {
        'filter.all:substr:multi::ilike': term,
        'filter.obsolete': 0,
        current:  this.$real.val(),
      };

      if (this.o.part_type)
        data['filter.part_type'] = this.o.part_type.split(',');

      if (this.o.classification_id)
        data['filter.classification_id'] = this.o.classification_id.split(',');

      if (this.o.unit)
        data['filter.unit'] = this.o.unit.split(',');

      if (this.o.convertible_unit)
        data['filter.unit_obj.convertible_to'] = this.o.convertible_unit;

      return data;
    },
    set_item: function(item) {
      var self = this;
      if (item.id) {
        this.$real.val(item.id);
        // autocomplete ui has name, use the value for ajax items, which contains displayable_name
        this.$dummy.val(item.name ? item.name : item.value);
      } else {
        this.$real.val('');
        this.$dummy.val('');
      }
      this.state      = this.STATES.PICKED;
      this.last_real  = this.$real.val();
      this.last_dummy = this.$dummy.val();
      this.$real.trigger('change');

      if (this.o.fat_set_item && item.id) {
        $.ajax({
          url: '../../controller.pl?action=Part/show.json',
          data: { 'part.id': item.id },
          success: function(rsp) {
            self.$real.trigger('set_item:PartPicker', rsp);
          },
        });
      } else {
        this.$real.trigger('set_item:PartPicker', item);
      }
      this.annotate_state();
    },
    set_multi_items: function(data) {
      this.run_action(this.o.action.set_multi_items, [ data ]);
    },
    make_defined_state: function() {
      if (this.state == this.STATES.PICKED) {
        this.annotate_state();
        return true
      } else if (this.state == this.STATES.UNDEFINED && this.$dummy.val() === '')
        this.set_item({})
      else {
        this.set_item({ id: this.last_real, name: this.last_dummy })
      }
      this.annotate_state();
    },
    annotate_state: function() {
      if (this.state == this.STATES.PICKED)
        this.$dummy.removeClass(this.STATES.UNDEFINED).addClass(this.STATES.PICKED);
      else if (this.state == this.STATES.UNDEFINED && this.$dummy.val() === '')
        this.$dummy.removeClass(this.STATES.UNDEFINED).addClass(this.STATES.PICKED);
      else {
        this.$dummy.addClass(this.STATES.UNDEFINED).removeClass(this.STATES.PICKED);
      }
    },
    handle_changed_text: function(callbacks) {
      var self = this;
      $.ajax({
        url: '../../controller.pl?action=Part/ajax_autocomplete',
        dataType: "json",
        data: $.extend( self.ajax_data(self.$dummy.val()), { prefer_exact: 1 } ),
        success: function (data) {
          if (data.length == 1) {
            self.set_item(data[0]);
            if (callbacks && callbacks.match_one) self.run_action(callbacks.match_one, [ data[0] ]);
          } else if (data.length > 1) {
            self.state = self.STATES.UNDEFINED;
            if (callbacks && callbacks.match_many) self.run_action(callbacks.match_many, [ data ]);
          } else {
            self.state = self.STATES.UNDEFINED;
            if (callbacks && callbacks.match_none) self.run_action(callbacks.match_none, [ self, self.$dummy.val() ]);
          }
          self.annotate_state();
        }
      });
    },
    /*  In case users are impatient and want to skip ahead:
     *  Capture <enter> key events and check if it's a unique hit.
     *  If it is, go ahead and assume it was selected. If it wasn't don't do
     *  anything so that autocompletion kicks in.  For <tab> don't prevent
     *  propagation. It would be nice to catch it, but javascript is too stupid
     *  to fire a tab event later on, so we'd have to reimplement the "find
     *  next active element in tabindex order and focus it".
     */
    /* note:
     *  event.which does not contain tab events in keypressed in firefox but will report 0
     *  chrome does not fire keypressed at all on tab or escape
     */
    handle_keydown: function(event) {
      var self = this;
      if (event.which == KEY.ENTER || event.which == KEY.TAB) {
        // if string is empty assume they want to delete
        if (self.$dummy.val() === '') {
          self.set_item({});
          return true;
        } else if (self.state == self.STATES.PICKED) {
          if (self.o.action.commit_one) {
            self.run_action(self.o.action.commit_one);
          }
          return true;
        }
        if (event.which == KEY.TAB) {
          event.preventDefault();
          self.handle_changed_text();
        }
        if (event.which == KEY.ENTER) {
          self.handle_changed_text({
            match_none: self.o.action.commit_none,
            match_one:  self.o.action.commit_one,
            match_many: self.o.action.commit_many
          });
          return false;
        }
      } else if (event.which == KEY.DOWN && !self.autocomplete_open) {
        var old_options = self.$dummy.autocomplete('option');
        self.$dummy.autocomplete('option', 'minLength', 0);
        self.$dummy.autocomplete('search', self.$dummy.val());
        self.$dummy.autocomplete('option', 'minLength', old_options.minLength);
      } else if ((event.which != KEY.SHIFT) && (event.which != KEY.CTRL) && (event.which != KEY.ALT)) {
        self.state = self.STATES.UNDEFINED;
      }
    },
    open_dialog: function() {
      if (this.o.multiple) {
        this.dialog = new ns.PickerMultiPopup(this);
      } else {
        this.dialog = new ns.PickerPopup(this);
      }
    },
    close_dialog: function() {
      this.dialog.close_dialog();
      this.dialog = undefined;
    },
    init: function() {
      var self = this;
      this.$dummy.autocomplete({
        source: function(req, rsp) {
          $.ajax($.extend(self.o, {
            url:      '../../controller.pl?action=Part/ajax_autocomplete',
            dataType: "json",
            data:     self.ajax_data(req.term),
            success:  function (data){ rsp(data) }
          }));
        },
        select: function(event, ui) {
          self.set_item(ui.item);
        },
        search: function(event, ui) {
          if ((event.which == KEY.SHIFT) || (event.which == KEY.CTRL) || (event.which == KEY.ALT))
            event.preventDefault();
        },
        open: function() {
          self.autocomplete_open = true;
        },
        close: function() {
          self.autocomplete_open = false;
        }
      });
      this.$dummy.keydown(function(event){ self.handle_keydown(event) });
      this.$dummy.on('paste', function(){
        setTimeout(function() {
          self.handle_changed_text();
        }, 1);
      });
      this.$dummy.blur(function(){
        window.clearTimeout(self.timer);
        self.timer = window.setTimeout(function() { self.annotate_state() }, 100);
      });

      var popup_button = $('<span>').addClass('ppp_popup_button');
      this.$dummy.after(popup_button);
      popup_button.click(function() { self.open_dialog() });
    },
    run_action: function(code, args) {
      if (typeof code === 'function')
        code.apply(this, args)
      else
        kivi.run(code, args);
    },
    clear: function() {
      this.set_item({});
    }
  };
  ns.Picker.prototype.STATES = {
    PICKED:    ns.Picker.prototype.CLASSES.PICKED,
    UNDEFINED: ns.Picker.prototype.CLASSES.UNDEFINED
  };

  ns.PickerPopup = function(pp) {
    this.timer = undefined;
    this.pp    = pp;
    this.open_dialog();
  };

  ns.PickerPopup.prototype = {
    open_dialog: function() {
      var self = this;
      kivi.popup_dialog({
        url: '../../controller.pl?action=Part/part_picker_search',
        data: self.pp.ajax_data(this.pp.$dummy.val()),
        id: 'part_selection',
        dialog: {
          title: kivi.t8('Part picker'),
          width: 800,
          height: 800,
        },
        load: function() { self.init_search(); }
      });
      window.clearTimeout(this.timer);
      return true;
    },
    init_search: function() {
      var self = this;
     // $('#part_picker_filter').keypress(function(e) { self.result_timer(e) }).focus();
      $('#no_paginate').change(function() { self.update_results() });
      this.update_results();
    },
    update_results: function() {
      var self = this;
      $.ajax({
        url: '../../controller.pl?action=Part/part_picker_result',
        data: $.extend({
          no_paginate: $('#no_paginate').prop('checked') ? 1 : 0,
        }, self.pp.ajax_data(function(){
          var val = $('#part_picker_filter').val();
          return val === undefined ? '' : val
        })),
        success: function(data){
          $('#part_picker_result').html(data);
          self.init_results();
        }
      });
    },
    init_results: function() {
      var self = this;
      $('div.part_picker_part').each(function(){
        $(this).click(function(){
          self.pp.set_item({
            id:   $(this).children('input.part_picker_id').val(),
            name: $(this).children('input.part_picker_description').val(),
            classification_id: $(this).children('input.part_picker_classification_id').val(),
            unit: $(this).children('input.part_picker_unit').val(),
            partnumber:  $(this).children('input.part_picker_partnumber').val(),
            description: $(this).children('input.part_picker_description').val(),
          });
          self.close_dialog();
         // self.pp.$dummy.focus();
          return true;
        });
      });
      $('#part_selection').keydown(function(e){
         if (e.which == KEY.ESCAPE) {
           self.close_dialog();
          // self.pp.$dummy.focus();
         }
      });
    },
    result_timer: function(event) {
      var self = this;
      if (!$('no_paginate').prop('checked')) {
        if (event.keyCode == KEY.PAGE_UP) {
          $('#part_picker_result a.paginate-prev').click();
          return;
        }
        if (event.keyCode == KEY.PAGE_DOWN) {
          $('#part_picker_result a.paginate-next').click();
          return;
        }
      }
      window.clearTimeout(this.timer);
      if (event.which == KEY.ENTER) {
        self.update_results();
      } else {
        this.timer = window.setTimeout(function() { self.update_results() }, 100);
      }
    },
    close_dialog: function() {
      $('#part_selection').dialog('close');
    }
  };

  ns.PickerMultiPopup = function(pp) {
    this.pp       = pp;
    this.callback = 'Part/add_multi_' + this.pp.o.part_type + '_items';
    this.open_dialog();
  };

  ns.PickerMultiPopup.prototype = {
    open_dialog: function() {
      var self = this;
      $('#row_table_id thead a img').remove();

      kivi.popup_dialog({
        url: 'controller.pl?action=Part/show_multi_items_dialog',
        data: $.extend({
          real_id: self.pp.real_id,
        }, self.pp.ajax_data(this.pp.$dummy.val())),
        id: 'jq_multi_items_dialog',
        dialog: {
          title: kivi.t8('Add multiple items'),
          width:  800,
          height: 800
        },
        load: function() {
          self.init_search();
        }
      });
      return true;
    },
    init_search: function() {
      var self = this;
      $('#multi_items_filter_table input, #multi_items_filter_table select').keydown(function(event) {
        if(event.which == KEY.ENTER) {
          event.preventDefault();
          self.update_results();
          return false;
        }
      });

     // $('#multi_items_filter_all_substr_multi_ilike').focus();
      $('#multi_items_filter_button').click(function(){ self.update_results() });
      $('#multi_items_filter_reset').click(function(){ $("#multi_items_form").resetForm() });
      $('#continue_button').click(function(){ self.add_multi_items() });
    },
    update_results: function() {
      var self = this;
      var data = $('#multi_items_form').serializeArray();
      data.push({ name: 'type', value: self.pp.type });
      $.ajax({
        url: 'controller.pl?action=Part/multi_items_update_result',
        data: data,
        method: 'post',
        success: function(data){
          $('#multi_items_result').html(data);
          self.init_results();
          self.enable_continue();
        }
      });
    },
    set_qty_to_one: function(clicked) {
      if ($(clicked).val() === '') {
        $(clicked).val(kivi.format_amount(1.00, -2));
      }
      $(clicked).select();
    },
    init_results: function() {
      var self = this;
      $('#multi_items_all_qty').change(function(event){
        $('.multi_items_qty').val($(event.target).val());
      });
      $('.multi_items_qty').click(function(){ self.set_qty_to_one(this) });
    },
    result_timer: function(event) {
    },
    close_dialog: function() {
      $('#jq_multi_items_dialog').dialog('close');
    },
    disable_continue: function() {
      $('#multi_items_result input').off("keydown");
      $('#continue_button').prop('disabled', true);
    },
    enable_continue: function() {
      var self = this;
      $('#multi_items_result input').keydown(function(event) {
        if(event.keyCode == KEY.ENTER) {
          event.preventDefault();
          self.add_multi_items();
          return false;
        }
      });
      $('#continue_button').prop('disabled', false);
    },
    add_multi_items: function() {
      // rows at all
      var n_rows = $('.multi_items_qty').length;
      if ( n_rows === 0) { return; }

      // filled rows
      n_rows = $('.multi_items_qty').filter(function() {
        return $(this).val().length > 0;
      }).length;
      if (n_rows === 0) { return; }

      this.disable_continue();

      var data = $('#multi_items_form').serializeArray();
      this.pp.set_multi_items(data);
    }
  };

  ns.reinit_widgets = function() {
    kivi.run_once_for('input.part_autocomplete', 'part_picker', function(elt) {
      if (!$(elt).data('part_picker'))
        $(elt).data('part_picker', new kivi.Part.Picker($(elt)));
    });
  }

  ns.init = function() {
    ns.reinit_widgets();
  }

  $(function(){
    $('#ic').on('focusout', '.reformat_number', function(event) {
       ns.reformat_number(event);
    });

    $('.add_makemodel_input').keydown(function(event) {
      if(event.keyCode == 13) {
        event.preventDefault();
        ns.add_makemodel_row();
        return false;
      }
    });

    $('#part_warehouse_id').change(kivi.Part.reload_bin_selection);

    ns.init();
  });
  
  
    ns.newPosition = function() {
        console.log( orderID );
        console.log("newPosition");
        //alert( 'newPosition');

       $('.orderPos').children('.part_picker').remove();
       $('.orderPos').children('.nPunity').remove();

        /***************************************************
        *set values to empty string
        ***************************************************/

        $('.newOrderPos').children('.itemNr').val('');
        $('.newOrderPos').children().children('#add_item_parts_id_name').val('');
        $('.newOrderPos').children('.unity').val('');
        $('.newOrderPos').children('.price').val('');
        $('.newOrderPos').children('.discount').val('');
        $('.newOrderPos').children('.partID').text('');
        $('.newOrderPos').children('.posID').text('');

        //zaehler();

        /***************************************************
        *add classes for positioning
        ***************************************************/

        $('.orderPos').children('.description').addClass('description2');
        $('.orderPos').children('.unity').addClass('unity2');
        $('.orderPos').children('.number').addClass('number2');
        $('.orderPos').children('.price').addClass('price2');
        $('.orderPos').children('.discount').addClass('discount2');
        $('.orderPos').children('.total').addClass('total2');
        $('.orderPos').children('.mechanics').addClass('mechanics2');
        $('.orderPos').children('.status').addClass('status2');
        $('.orderPos').children('.posID').addClass('posID2');
        $('.orderPos').children('.partID').addClass('partID2');
        //$('.orderPos').children('.pos-instruction').addClass('pos-instruction2');

        //updatePositions();

        /***************************************************
        *add function and
        *mathematical calculations to elements
        ***************************************************/

        $('.elem').change(function (e) {
            //updatePositions();
        }).on( 'keyup', function(){
            /***************************************************
            *Wird ben√∂tigt um der ".elem" f√ºr das INSERT das Value zu zuweisen
            ***************************************************/
            var y = $(this).val();
            $(this).attr('value', y);
            //updatePositions();
        });
        //    add_item_input


        $( '.number, .price, .discount' ).on( 'keyup', function (){
            //Calculate
            if ($(this).parent('.positions').hasClass('orderPos')) {
                var number = $( this ).parent( '.orderPos' ).children( '.number' ).val().replace(',', '.');
                var price = $( this ).parent( '.orderPos' ).children( '.price' ).val().replace(',', '.');
                var discount = ( 1 - ($( this ).parent( '.orderPos' ).children( '.discount' ).val() / 100) );
                //console.log('NUMBERCHANGE = ' + price + ', ' + number + ', ' + discount);
                //var z = ( x * y );
                $( this ).parent( '.orderPos' ).children( '.total' ).val( ((number * price) * discount).toFixed(2).replace('.', ',') );
                //console.log( (number * price) * discount );
                //newOrderTotalPrice();
                //updateOrderDatabase();
                //updatePositionDatabase();
            }
        })

        $( '.rmv' ).click( function (){
            var posToDel = $(this).parent().children('.posID').val();
            alert(posToDel);
                $.ajax({
                    url: 'ajax/order.php',
                    data: { action: "delPosition", data: posToDel },
                    type: "POST",
                    success: function(){
                        //alert('Gesendet');
                    },
                    error:   function(){
                        alert('l√∂schen der Daten fehlgeschlagen!');
                    }
                });
            $( this ).parent().remove();
            zaehler();
            updatePositions();
            newOrderTotalPrice();
            updateOrderDatabase();
        });

        $('#sortable').sortable({
            update: function() {
                zaehler();
                updatePositions();
            }
        });

       // $('#add_item_parts_id_name').focus();

        //newOrderTotalPrice();
    }




});

</script>
